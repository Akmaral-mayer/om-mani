{"version":3,"sources":["Components/TodosRemaining.js","Components/TodoItem.js","Components/TodosCheckAll.js","Components/TodosFiltered.js","Components/TodosClearCompleted.js","Components/App.js","serviceWorker.js","index.js"],"names":["TodosRemaining","props","remaining","TodoItem","key","todo","id","className","type","onChange","event","checkTodo","index","editing","classnames","completed","onDoubleClick","editTodo","title","autoFocus","defaultValue","onBlur","doneEdit","onKeyUp","cancelEdit","onClick","deleteTodo","TodosCheckAll","checked","anyRemaining","checkAllTodos","TodosFiltered","updateFilter","filter","TodosClearCompleted","clearCompleted","axios","defaults","baseURL","App","todoInput","React","createRef","state","beforeEditCash","idForTodo","todos","addTodo","current","value","trim","length","post","then","res","console","log","status","setState","prevState","unshift","splice","persist","target","todosCompletedCount","todosFiltered","forEach","retrieveTodos","get","tenTodo","data","number","placeholder","ref","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6c82efc.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TodosRemaining = (props) => {\r\n    return (\r\n        <div>\r\n            {props.remaining} items left\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nTodosRemaining.propTypes = {\r\n    remaining: PropTypes.number.isRequired\r\n}\r\n\r\nexport default TodosRemaining;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as classnames from 'classnames';\r\n\r\nconst TodoItem = props => {\r\n    return (\r\n        <div>\r\n            <div key={props.todo.id} className=\"todo-item\">\r\n                <div className=\"todo-item-left\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        onChange={(event) => props.checkTodo(props.todo, props.index, event)}\r\n                    />\r\n\r\n                    {!props.todo.editing &&\r\n                        <div\r\n                            className={classnames({ 'todo-item-label': true, 'completed': props.todo.completed })}\r\n                            onDoubleClick={(event) => props.editTodo(props.todo, props.index, event)}\r\n                        >\r\n                            {props.todo.title}\r\n                        </div>\r\n                    }\r\n\r\n                    {props.todo.editing &&\r\n                        <input\r\n                            type=\"text\"\r\n                            autoFocus\r\n                            className={\"editTodo\"}\r\n                            defaultValue={props.todo.title}\r\n                            onBlur={(event) => props.doneEdit(props.todo, props.index, event)}\r\n                            onKeyUp={(event) => {\r\n                                if (event.key === \"Enter\") {\r\n                                    props.doneEdit(props.todo, props.index, event);\r\n                                } else if (event.key === 'Escape') {\r\n                                    props.cancelEdit(props.todo, props.index, event);\r\n                                }\r\n                            }} />\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"remove-item\" onClick={(event) => props.deleteTodo(props.index)}>\r\n                    x\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    checkTodo: PropTypes.func.isRequired,\r\n    editTodo: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired,\r\n    cancelEdit: PropTypes.func.isRequired,\r\n    doneEdit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TodosCheckAll = props => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={!props.anyRemaining()}\r\n                        onChange={props.checkAllTodos} />\r\n                    Check All\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTodosCheckAll.propTypes = {\r\n    anyRemaining: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodosCheckAll;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as classnames from 'classnames';\r\n\r\nconst TodosFiltered = props => {\r\n    return (\r\n        <div>\r\n            <button onClick={() => props.updateFilter('all')}\r\n                className={classnames({ 'active': props.filter === 'all' })}\r\n            >\r\n                All\r\n              </button>\r\n\r\n            <button onClick={() => props.updateFilter('active')}\r\n                className={classnames({ 'active': props.filter === 'active' })}\r\n            >\r\n                Active\r\n              </button>\r\n\r\n            <button onClick={() => props.updateFilter('completed')}\r\n                className={classnames({ 'active': props.filter === 'completed' })}\r\n            >\r\n                Completed\r\n              </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nTodosFiltered.propTypes = {\r\n    updateFilter: PropTypes.func.isRequired,\r\n    filter: PropTypes.string.isRequired\r\n};\r\n\r\nexport default TodosFiltered;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TodosClearCompleted = props => {\r\n    return (\r\n        <div>\r\n            <button onClick={props.clearCompleted}>Clear Completed</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nTodosClearCompleted.propTypes = {\r\n    clearCompleted: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodosClearCompleted;","import React, { Component } from 'react';\nimport '../App.css';\n// Components below\nimport TodosRemaining from './TodosRemaining';\nimport TodoItem from './TodoItem';\nimport TodosCheckAll from './TodosCheckAll';\nimport TodosFiltered from './TodosFiltered';\nimport TodosClearCompleted from './TodosClearCompleted';\nimport axios from 'axios';\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com/todos';\n\nclass App extends Component {\n\n  componentDidMount() {\n    axios.get(`https://jsonplaceholder.typicode.com/todos`)\n      .then(res => {\n        let todos = res.data;\n        let tenTodo = todos.filter((number) => {\n          return number.id < 9\n        })\n        console.log(tenTodo)\n        this.setState({ todos: tenTodo });\n        console.log(\"GET req answer is \" + res.status)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Let's Do It</h1>\n        <div className=\"mainBlock\">\n\n          <input type='text'\n            className='todo-input'\n            placeholder=\"Gonna do\"\n            ref={this.todoInput}\n            onKeyUp={this.addTodo}\n          />\n\n          <br />\n\n          {this.todosFiltered().map((todo, index) =>\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              index={index}\n              checkTodo={this.checkTodo}\n              doneEdit={this.doneEdit}\n              cancelEdit={this.cancelEdit}\n              deleteTodo={this.deleteTodo}\n              editTodo={this.editTodo}\n            />\n\n          )\n          }\n\n          <br />\n          <div className=\"extra-container\">\n            <TodosCheckAll\n              anyRemaining={this.anyRemaining}\n              checkAllTodos={this.checkAllTodos}\n            />\n            <TodosRemaining remaining={this.remaining()} />\n          </div>\n          <br />\n\n          <div className=\"extra-container\">\n\n            <div>\n              <TodosFiltered\n                updateFilter={this.updateFilter}\n                filter={this.state.filter}\n              />\n            </div>\n\n            {this.todosCompletedCount() > 0 &&\n              <TodosClearCompleted\n                clearCompleted={this.clearCompleted}\n              />\n            }\n\n          </div>\n\n        </div >\n      </div >\n    );\n  }\n\n  todoInput = React.createRef();\n\n  state = {\n    filter: 'all',\n    beforeEditCash: '',\n    idForTodo: 9,\n    todos: [\n      // {\n      //   'id': 1,\n      //   'title': 'Finish React Screencast',\n      //   'completed': false,\n      //   'editing': false\n      // },\n      // {\n      //   'id': 2,\n      //   'title': 'Take over the world',\n      //   'completed': false,\n      //   'editing': false\n      // },\n      // {\n      //   'id': 3,\n      //   'title': 'Be the best of the bests',\n      //   'completed': false,\n      //   'editing': false\n      // }\n    ]\n  }\n\n  addTodo = (event) => {\n    if (event.key === 'Enter') {\n      const todoInput = this.todoInput.current.value;\n\n      if (todoInput.trim().length === 0) {\n        return;\n      }\n\n      axios.post(`https://jsonplaceholder.typicode.com/todos`, {\n        title: todoInput,\n        completed: false,\n      })\n        .then(res => {\n          console.log(\"POST req answer is \" + res.status);\n        })\n\n      this.setState((prevState, props) => {\n        let todos = prevState.todos;\n        let idForTodo = prevState.idForTodo + 1;\n\n        todos.unshift({\n          id: idForTodo,\n          title: todoInput,\n          completed: false,\n          editing: false\n        })\n\n        return { todos, idForTodo }\n      });\n\n      this.todoInput.current.value = '';\n    }\n  }\n\n  deleteTodo = (index) => {\n    this.setState((prevState, props) => {\n      let todos = prevState.todos;\n\n      todos.splice(index, 1);\n\n      return { todos }\n    });\n  }\n\n  checkTodo = (todo, index, event) => {\n    this.setState((prevState, props) => {\n      let todos = prevState.todos;\n      todo.completed = !todo.completed;\n\n      todos.splice(index, 1, todo);\n\n      return { todos }\n    });\n  }\n\n  editTodo = (todo, index, event) => {\n    this.setState((prevState, props) => {\n      let todos = prevState.todos;\n      todo.editing = true;\n\n      todos.splice(index, 1, todo);\n\n      return { todos, beforeEditCash: todo.title }\n    });\n  }\n\n\n  doneEdit = (todo, index, event) => {\n    event.persist();\n\n    this.setState((prevState, props) => {\n      let todos = prevState.todos;\n      todo.editing = false;\n\n      if (event.target.value.trim().length === 0) {\n        todo.title = prevState.beforeEditCash;\n      } else {\n        todo.title = event.target.value;\n      }\n\n      todos.splice(index, 1, todo);\n\n      return { todos }\n    });\n  }\n\n  cancelEdit = (todo, index, event) => {\n    event.persist();\n\n    this.setState((prevState, props) => {\n      let todos = prevState.todos;\n      todo.title = prevState.beforeEditCash;\n      todo.editing = false;\n      todos.splice(index, 1, todo);\n\n      return { todos }\n    });\n  }\n\n\n  remaining = () => {\n    return this.state.todos.filter(todo => !todo.completed).length;\n  }\n\n  anyRemaining = () => {\n    return this.remaining() !== 0;\n  }\n\n  todosCompletedCount = () => {\n    return this.state.todos.filter(todo => todo.completed).length;\n  }\n\n  clearCompleted = () => {\n    this.setState((prevState, props) => {\n      // let todos = prevState.todos;\n      // todos = todos.filter(todo => !todo.completed);\n      // return { todos };\n\n      return {\n        todos: prevState.todos.filter(todo => !todo.completed)\n      };\n    })\n  }\n\n  updateFilter = filter => {\n    this.setState({ filter });\n  }\n\n  todosFiltered = () => {\n    if (this.state.filter === \"all\") {\n      return this.state.todos;\n    } else if (this.state.filter === \"active\") {\n      return this.state.todos.filter(todo => !todo.completed);\n    } else if (this.state.filter === \"completed\") {\n      return this.state.todos.filter(todo => todo.completed);\n    }\n    return this.state.todos;\n  }\n\n  checkAllTodos = (event) => {\n    event.persist();\n    this.setState((prevState, props) => {\n      let todos = prevState.todos;\n\n      todos.forEach((todo) => todo.completed = event.target.checked);\n      return { todos };\n    })\n  }\n\n  retrieveTodos = (() => {\n    console.log('working')\n  })\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}